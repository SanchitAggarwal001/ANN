# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F6MOCw1tjMoIeAtLSzHqu-z28fpbdl-w
"""

!pip install tensorflow-gpu

pip install tensorflow

import tensorflow as tf
print(tf.__version__)

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset= pd.read_csv('Churn_Modelling.csv')
dataset.head()

X= dataset.iloc[:,3:13]
y= dataset.iloc[:,13]

X.head()

y.head()

#Feature engineering
geography= pd.get_dummies(X['Geography'],drop_first=True)
gender= pd.get_dummies(X['Gender'],drop_first=True)

X= X.drop(['Geography', 'Gender'],axis=1)
X.head()

X=pd.concat([X,geography,gender], axis=1)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.2, random_state=0)

#feature scaling
from sklearn.preprocessing import StandardScaler
sc= StandardScaler()
X_train= sc.fit_transform(X_train)
X_test= sc.transform(X_test)

X_train

X_test

X_train.shape

#lets create ann
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LeakyReLU, PReLU, ELU, ReLU
from tensorflow.keras.layers import Dropout

#lets initialize ann
classifier= Sequential()

#adding input layer
classifier.add(Dense(units=11, activation='relu'))

#adding 1st hidden layer
classifier.add(Dense(units=7, activation='relu'))

#adding 2nd hidden layer
classifier.add(Dense(units=6, activation='relu'))

#adding output layer
classifier.add(Dense(units=1, activation='sigmoid'))

classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model_history= classifier.fit(X_train, y_train, validation_split=0.33, batch_size=10, epochs=100)

#early stopping
import tensorflow as tf
early_stopping= tf.keras.callbacks.EarlyStopping(
    monitor="val_loss",
    min_delta=0.0001,
    patience=20,
    verbose=1,
    mode="auto",
    baseline=None,
    restore_best_weights=False,
)

model_history= classifier.fit(X_train, y_train, validation_split=0.33, batch_size=10, epochs=100, callbacks=early_stopping)

model_history.history.keys()

plt.plot(model_history.history['accuracy'])
plt.plot(model_history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(model_history.history['loss'])
plt.plot(model_history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

y_pred= classifier.predict(X_test)
y_pred= (y_pred>0.5)

#make confusion matrix
from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test, y_pred)
cm

#cal accuracy
from sklearn.metrics import accuracy_score
score= accuracy_score(y_pred, y_test)
score

#get the weights
classifier.get_weights()

